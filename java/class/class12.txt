Typecasting in java
====================
The process of converting from one datatype to another datatype is called typecasting.

There are two ways to perform typecasting in java.

1) Implicit typecasting 

2) Explicit typecasting

1) Implicit typecasting 
-----------------------
If we want to store small value in a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as Widening or Upcasting.

We can perform implicit typecasting as follow.

ex:
	byte	-->	short
				-->
					int  --> long --> float --> double
				-->
			char 

ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		byte b=10;

		int i=b;

		System.out.println(i); //10
	}
}

ex:2
----
class Test  
{
	public static void main(String[] args) 
	{
		char ch='A';

		float f=ch;

		System.out.println(f); //65.0
	}
}

ex:3
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		double d=i;

		System.out.println(d); //10.0 
	}
}

2) Explicit typecasting
-------------------------
If we want to store bigger value in a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte	<--	short
				<--
					int  <-- long <-- float <-- double
				<--
			char 
	
ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		float f=10.5f;
		
		int i=(int)f;

		System.out.println(i); //10
	}
}

ex:2
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=97;

		char ch=(char)i;

		System.out.println(ch);// a 
	}
}

ex:3
-----
class Test  
{
	public static void main(String[] args) 
	{
		int i=130;

		byte b=(byte)i;

		System.out.println(b); // -126
	}
}

Types of blocks in java
=======================
A block is a set of statements which is enclosed in a curly braces i.e {}.

ex:
	{
		-
		- //set of statements 
		-
	}

We have three types of blocks in java.

1) Instance Block 

2) Static Block 

3) Local Block 

1) Instance Block 
-------------------
Instance block is used to initialize the instance variables.

Instance block will be declare immediately after the class but not inside methods and constructors.

Instance block will be execute when we create an object.

syntax:
	//instance block
	{
		-
		- //set of statements
		-
	}

ex:1
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	main-method 

ex:2
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method
	instance-block

ex:3
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}

ex:4
----
class Test  
{
	//instance variable
	int i;

	//instance block
	{
		i=100;
	}
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i);//100
	}
}

2) Static Block 
------------------
Static block is used to initialize the static variables.

Static block must and should declare immediately after the class using static keyword but not inside methods and constructors.

Static block will be executed at the time of classloading. 

syntax:
	//static block
	static
	{
		-
		- // set of statements 
		- 
	}

ex:1
-----
class Test  
{
	//static block
	static
	{
		System.out.println("static-block");
	}
	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	static-block
	main-method

ex:2
----
class Test  
{
	//instance block 
	{
		System.out.println("instance-block");
	}

	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println("main-method");
	}
}
o/p:
	static-block
	instance-block
	main-method

ex:3
----
class Test  
{
	//static variable 
	static int i;

	//static block 
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{
		System.out.println(i);//200
	}
}

3) Local Block
--------------
A local block is used to initialize the local variables.

Local block must and should declare inside the methods.

Local block will execute just like a normal statement.

syntax:
	//local block
	{
		-
		- //set of statements 
		-
	} 

ex:1
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");

		//local block
		{
			System.out.println("stmt2");
		}

		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt2
	stmt3

ex:2
----
class Test  
{
	public static void main(String[] args) 
	{
		//local variable 
		int i;

		//local block
		{
			i=300;
		}

		System.out.println(i);//300
	}
}

Interview Question
-----------------

Q) Can we execute java program without main method?

Yes, till java 6 version it is possible to execute java program without main method using static block.But from java 7 version onwards it is not possible to execute java program without main method.

ex:

class Test  
{
	static
	{
		System.out.println("Hello World");
		System.exit(0);
	}
}














































































































































































