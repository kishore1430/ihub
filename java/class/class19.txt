4) Jump Statement
==================
Jump statement is used to jump from one section of code to another section.

We have two types of jump statements.

1) break stmt 

2) continue stmt 

1) break stmt 
---------------
It is used to break the execution of loops and switch case.

For conditional statement we can use if condition.

syntax:
	break; 

ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		break;
		System.out.println("stmt2");
	}
}

o/p:
	C.T.E : break outside switch or loop


ex:2
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			break;
		}
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E : break outside switch or loop

ex:3
----
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				break;
			}
			System.out.print(i+" "); // 1 2 3 4
		}
	}
}



2) continue stmt 
---------------
It is used to continue the execution of loops.

For conditional statement we can use if condition.

syntax:
	continue;

ex:1
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		continue;
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E :continue outside of loop

ex:2
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(true)
		{
			continue;
		}
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E :continue outside of loop

ex:3
----
class Test  
{
	public static void main(String[] args) 
	{
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				continue;
			}
			System.out.print(i+" ");//1 2 3 4 6 7 8 9 10
		}

	}
}

Arrays
======
Array is a collection of homogeneous data elements.

The main advantages of arrays are 

1) We can represent multiple elements using single variable name.
   ex:
	int[] arr={10,20,30};

2) Performance point of view arrays are recommanded to use.

The main disadvantages of arrays are

1) It is fixed in size.Once if we create an array there is no chance of increasing or decreasing 
   the size of an array.

2) To use array concept in advanced we should know what is the size of an array which is not    
   possible.
 
In java arrays are categories into three types.

1) Single Dimensional Array 

2) Double Dimensional Array 

3) Multi Dimensional Array 

Array Declaration
-----------------
At the time of array declaration we should not specify array size.

					Array
|-----------------------------------------|--------------------------------------------------|
Single Dimensional Array	Double Dimensional Array		Multi Dimensional Array 

int[] arr;			int[][] arr;				int[][][] arr;
int  []arr;			int  [][]arr;				int [][][]arr;
int  arr[];			int  arr[][];				int arr[][][];
				int[]  []arr;				int[][] []arr;
				int[]  arr[];				int[][] arr[];
				int  []arr[];				int[]  [][]arr;
									int[]  arr[][];
									int[]  []arr[];
									int  [][]arr[];
									int  []arr[][];

Array Creation
---------------
In java, every array consider as an object.Hence we will use new operator to create an array.
ex:
	int[] arr=new int[3];

Diagram: class19.1

Rules to constructor an array
------------------------------
Rule1:
-----
	At the time array creation compulsary we need to specify array size.
	ex:
		int[] arr=new int[3]; // valid 

		int[] arr=new int[];  //C.T.E  Array Dimension Missing 

Rule2:
------
	It is legal to have an array size with zero.
	ex:
		 int[] arr=new int[0]; 
		 System.out.println(arr.length);//0

Rule3:
------
	We can't take negative number as an array size otherwise we will get
	NegativeArraySizeException.
	ex:
		int[] arr=new int[-3]; //R.E  NegativeArraySizeException 

Rule4:
-----
	The allowed datatype for an array size is byte,short,int and char.If we take other 
	datatype then we will get compile time error.
	ex:
		byte b=10;
		int[] arr=new int[b]; 

		int[] arr=new int['a'];

		int[] arr=new int[10.5d]; //invalid  

Rule5:
------
	The maximum length we can take for an array size is maximum length of int datatype.
	ex:
		int[] arr=new int[2147483647];


Array Initialization
---------------------
Whenever we create an array ,every array element will be initialized with default values.

If we are not happy with default values then we can change with customized values.

ex:
	int[] arr=new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;
	arr[3]=40; // R.E ArrayIndexOutOfBoundsException 

Diagram: class19.2


Array Declaration ,Creation and Initialization using single line
-----------------------------------------------------------------

	int[] arr;
	arr=new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;    ===> int[] arr={10,20,30};

		      ===> char[] carr={'a','b','c'};

		      ===> String[] sarr={"hi","hello","bye"};	
		

Q) What is the difference between length and length() ?

length
------
A length is a variable which is applicable for arrays.

It will return size of an array.

ex:
	
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr=new int[5];
		System.out.println(arr.length);//5
	}
}

length()
--------
It is a predefined method which is applicable for String objects.

It will return number of characters present in String.

ex:
	
class Test  
{
	public static void main(String[] args) 
	{
		String str="bhaskar";

		System.out.println(str.length());//7
	}
}

Single Dimensional Array programs
---------------------------------

Q) Write a java program to accept array elements and display them?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the array size :");
		int size=sc.nextInt(); //5 

		int[] arr=new int[size];
		
		//inserting elements
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("Enter the element :");
			arr[i]=sc.nextInt();
		}

		//display elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}


Q) Write a java program to display given positive integer array elements?

input:
	5 7 9 1 2 

approach1
---------

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,2};

		//display elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}

approach2
--------

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,2};

		//for each loop
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
	}
}


Q) Write a java program to display array elements in reverse order?

input:
	5 7 9 1 3 4 2 

output:
	2 4 3 1 9 7 5 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,3,4,2};

		for(int i=arr.length-1;i>=0;i--)
		{
			System.out.print(arr[i]+" ");
		}
		
	}
}



Q) Write a java program to perform sum of array elements ?

input:
	5 7 9 1 3 4 2 

output:
	31

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,3,4,2};

		//for each loop
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		System.out.println(sum);
	}
}


Q) Write a java program to display even elements?

input:
	5 7 9 1 3 4 2 

output:
	4 2 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,3,4,2};

		//for each loop
		for(int i:arr)
		{
			if(i%2==0)
			{
				System.out.print(i+" ");
			}
		}
	}
}



Q) Write a java program to display odd elements?

input:
	5 7 9 1 3 4 2 

output:
	5 7 9 1 3 

ex:


class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,3,4,2};

		//for each loop
		for(int i:arr)
		{
			if(i%2!=0)
			{
				System.out.print(i+" ");
			}
		}
	}
}



Q) Write a java program to display number of even elements?

input:
	5 7 9 1 3 4 2 

output:
	2

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={5,7,9,1,3,4,2};

		//for each loop
		int cnt=0;
		for(int i:arr)
		{
			if(i%2==0)
			{
				cnt++;
			}
		}
		System.out.println(cnt);
	}
}












































		




















































































































































