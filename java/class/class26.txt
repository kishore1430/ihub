ex:
----
interface A 
{
	//abstract methods 
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}

ex:
---
interface A 
{
	//abstract methods 
	public abstract void m1();
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we need to override all methods otherwise we will get compile time error.

ex:
--
interface Shape
{
	//abstract methods
	public abstract void circle();
	public void rectangle();
	abstract void square();
	void triangle();
}
class ShapeImpl implements Shape
{
	public void circle()
	{
		System.out.println("circle-shape");
	}
	public void rectangle()
	{
		System.out.println("rectangle-shape");
	}
	public void square()
	{
		System.out.println("square-shape");
	}
	public void triangle()
	{
		System.out.println("triangle-shape");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Shape s=new ShapeImpl();
		s.circle();
		s.rectangle();
		s.square();
		s.triangle();
	}
}

A class can't extends more then one class. But interface can extends more then one interface.

ex:
interface A
{
	void m1();
}
interface B 
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		C c=new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more then one interface.

ex:
---
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother 
{
	public void height()
	{
		float height=(Father.HT+Mother.HT)/2;
		System.out.println("Child Height :"+height);
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}

Note:
-----
According to Java 8, Interface is a collection of abstract methods, default methods and static methods.


Abstract class
==============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A "abstract" keyword is applicable for methods and classes but not for variables.

It is not possible to create object for abstract classes.

To write the implementation of abstract methods of an abstract class we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
	abstract class <class_name>
	{
		-
		- // instance variables 
		- // abstract methods 
		- // concrete methods 
		-
	}

If we know partial implementation then we need to use abstract class.

ex:
---
abstract class Plan 
{
	//instance variable 
	protected double rate;

	//abstract method
	public abstract void getRate();

	//concrete method 
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill :"+ (rate*units));
	}
}
class DomesticPlan extends Plan 
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);

		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}


Q) What is the difference between interface and abstract class?

Interface				abstract class
----------				-------------
To declare interface we will use 	To declare abstract class we will use abstract keyword.
interface keyword.

It is a collection of abstract methods,	It is a collection of abstract methods and concrete
default methods and static methods.	methods.

It contains constants.			It contains instance variables.

We can achieve multiple inheritance.	We can't achieve multiple inheritance.

It does not allow constructor.		It allows constructor.

It does not support blocks.		It supports blocks.

If we know specification then we need 	If we know partial implementation then we need to use 
to use interface.			abstract class.

To implement abstract methods we will	To implement abstract methods we wil use sub classes.
use implementation class.



Random
=======
Random is a class which is present in java.util package.

It is used to generate random numbers.

We can create object for Random class as follow.
ex:
	Random r=new Random();

Random class contains following methods.
ex:
	cmd> javap   java.util.Random 

	public int nextInt();
  	public int nextInt(int);
  	public long nextLong();
  	public boolean nextBoolean();
  	public float nextFloat();
  	public double nextDouble();
	and etc.

ex:
---
import java.util.Random;
class Test 
{
	public static void main(String[] args)
	{
		Random r=new Random();
		int n=r.nextInt();
		System.out.println(n);
	}
}
Note:
----
	It will generate random number between  -2147483648 to 2147483647


ex:
---
import java.util.Random;
class Test 
{
	public static void main(String[] args)
	{
		Random r=new Random();
		int n=r.nextInt(100);
		System.out.println(n);
	}
}

Note:
-----
	It will generate random number between  0 to 100
	






















