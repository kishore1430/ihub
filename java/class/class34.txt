Q)What is the difference between Comparable and Comparator interface?

Comparable
-----------
Comparable is an interface which is present in java.lang package.

Comparable interface contains only one method i.e compareTo() method.

If we depends upon default natural sorting order then we need to use Comparable interface.

ex:		
		obj1.compareTo(obj2)

		It will return -ve if obj1 comes before obj2
		It will return +ve if obj1 comes after obj2
		It will return 0 if both objects are same.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("A".compareTo("Z")); // -25
		
		System.out.println("Z".compareTo("A")); // 25

		System.out.println("K".compareTo("K")); //0
	}
}

Q) Write a java program to compare two dates?

import java.time.*;  
class Test  
{
	public static void main(String[] args) 
	{
		LocalDate d1=LocalDate.now(); // 2024-02-20

		LocalDate d2=LocalDate.of(2024,01,15); // 2024-01-15

		if(d1.compareTo(d2) > 0)	
				System.out.println("date1 is greater then date2");
		else if(d1.compareTo(d2) < 0)
				System.out.println("date1 is less then date2");
		else
				System.out.println("Both are same");

	}
}



Comparator 
----------
Comparator is an interface which is present in java.util package.

Comparator interface contains two methods i.e compare() method and equals() method.

If we depends upon customized sorting order then we need to use Comparator interface.


Here implementation compare() method is mandatory.

ex:
	public int compare(Object obj1,Object obj2)

		It will return +ve if obj1 comes before obj2
		It will return -ve if obj1 comes after obj2
		It will return 0 if both objects are same.

Implementation of equals() method is optional.Because this method present in Object class which is available by default  through inheritance.

ex:
---

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(3);
		ts.add(10);
		ts.add(1);
		ts.add(5);
		System.out.println(ts); // 10  5  3 1
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
			Integer i1=(Integer)obj1;
			Integer i2=(Integer)obj2;
			if(i1<i2)
				return 1;
			else if(i1>i2)
				return -1;
			else 
				return 0;
	}
}


ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(3);
		ts.add(10);
		ts.add(1);
		ts.add(5);
		System.out.println(ts); // 1 3 5 10
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
			Integer i1=(Integer)obj1;
			Integer i2=(Integer)obj2;
			if(i1<i2)
				return -1;
			else if(i1>i2)
				return 1;
			else 
				return 0;
	}
}

Interview Question
==================

Q) Write a java program to display largest/longest common subsequence?

Input:
	ABCAB
	ACFB

Output:
	3

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String firstStr="ABCAB";
		String secondStr="ACFB";

		//caller method 
		System.out.println(longestCommonSubsequence(firstStr,secondStr));
	}
	public static int longestCommonSubsequence(String str1,String str2)
	{
			return solve(str1,str2,0,0);
	}
	public static int solve(String s1,String s2,int i,int j)
	{
			if(i==s1.length())
				return 0;
			if(j==s2.length())
				return 0;

			int ans=0;

			if(s1.charAt(i) == s2.charAt(j))
			{
				ans=1+solve(s1,s2,i+1,j+1);
			}
			else
			{
				ans=Math.max(solve(s1,s2,i+1,j),solve(s1,s2,i,j+1));
			}

			return ans;
	}
}


Map
=====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in key and value pair then we need to use Map interface.

Key and value must be objects.

Each key and value pair is called single entry or one entry.

But key can't duplicate but value can be duplicate.

Diagram: class34.1


























	








































