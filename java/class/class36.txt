Types of Datastructures In Java
===============================
We have two types of data structures in java.

Diagram: class36.1



Multithreading
===============

Q) What is the difference between Thread and Process?

Thread 
-------
It is a leight weight sub process.

We can run multiple threads concurently.

One thread can communicate with another thread.

ex:
	A class is one thread  
	A block is one thread 
	A constructor is one thread  

Process
-------
A process is a collection of threads.

We can run multiple process concurently.

One process can't communicate with another process.

ex:
	taking a class using zoom meeting is one process
	downloading a file from internet is one process
	typing the notes in editor is one process.


Multitasking
=============
Executing several task simultenously such concept is called multitasking.

We have two types of multitasking.

1) Thread based multitasking 
---------------------------
	Executing several task simultenously where each task is a same part of a program.

	It is best suitable for programmatic level.


2) Process based multitasking 
----------------------------
	Executing several task simultenously where each task is a independent process.
	
	It is best suitable for OS level.

Multithreading
==============
Executing several threads simulteneously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by Java API.

The main important application areas of multithreading are.

1) To implements multimedia graphics.

2) To develop video games.

3) To develop animations.



Ways to create a thread in java
===============================
There are two ways to create a thread in java.

1) By extending a Thread class 

2) By implementing a  Runnable interface 


1) By extending a Thread class 
-------------------------------

class MyThread extends Thread 
{
	//work of a thread 
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread
		MyThread t=new MyThread();

		//start a thread 
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case 1: Thread Schedular 
-------------------------
If multiple threads are waiting for execution then which thread will execute will decided by thread schedular.

What algorithm, behaviour or mechanism used by thread schedular is depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.



case2: Difference between t.start() and t.run()
-----------------------------------------------
If we invoke t.start() method a new thread will be created which is responsible to execute 
run() method automatially.

ex:

class MyThread extends Thread 
{
	//work of a thread 
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread
		MyThread t=new MyThread();

		//new thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we invoke t.run() method then no new thread will be created but run() method will execute 
just like normal method.

ex:
class MyThread extends Thread 
{
	//work of a thread 
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread
		MyThread t=new MyThread();

		//no new thread
		t.run();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case 3: If we won't override run() method
-----------------------------------------

If we won't override run() method then Thread class start() method executes Thread class run() method automatically.

But Thread class run() method is a empty implementation.

Hence we won't get any output from child thread.

ex:
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread
		MyThread t=new MyThread();

		//new thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
} 


case 4: If we overload run() method 
---------------------------------
If we overload run() method then Thread class start() method always execute run() method with no parameter only.

ex:
class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg method");
	}
	public void run(int i)
	{
		System.out.println("int-arg method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread
		MyThread t=new MyThread();

		//new thread
		t.start();

		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case 5: Life cycle of a thread
-----------------------------
Diagram: 36.2

Once if we create a thread object then our thread will be in new or born state.

Once if we call t.start() method then our thread will enter into ready or runnable state.

If thread schedular allocates to CPU then our thread goes to running state.

Once run() method execution is completed then our thread will goes to dead state.


2) By implementing a  Runnable interface 
-----------------------------------------
class MyRunnable implements Runnable 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyRunnable r=new MyRunnable();
		Thread t=new Thread(r); // r is a targatable interface 
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

Setting and Getting Name of a thread
=====================================
In java, every thread has a name explicitly provided by the programmer and automatically generated by JVM.

We have following methods to set and get name of a thread.

ex:
	public final void setName(String name)
	public final String getName() 

ex:
---

class MyThread extends Thread 
{
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName()); // main 

		MyThread t=new MyThread();
		System.out.println(t.getName());//Thread-0

		Thread.currentThread().setName("Parent-Thread");
		System.out.println(Thread.currentThread().getName()); //Parent-Thread

		t.setName("Child-Thread");
		System.out.println(t.getName());//Child-Thread
	}
}


Thread priority
===============
In java, every thread has a priority explicitly provided by the programmer or automatically generated by JVM.

The valid range of thread priority is 1 to 10.Where 1 is a least priority and 10 is highest.

A Thread class defines following standard constants as thread priorities.
ex:
	Thread.MAX_PRIORITY - 10
	Thread.MIN_PRIORITY - 1 
	Thread.NORM_PRIORITY- 5

IF we take more then 10 priority then we will get runtime exception called IllegalArgumentException. 

We don't have such constants like LOW_PRIORITY and HIGH_PRIORITY. 

A thread which is having highest priority will be executed first.

If multiple threads having same priority then we can't expect any execution order.

Thread schedular uses thread priorities while allocating to CPU.

We have following methods to set and get thread priorities.

ex:
	public final void setPriority(int priority)
	public final int getPriority()


ex:
---
class MyThread extends Thread 
{
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority()); // 5

		MyThread t=new MyThread();
		System.out.println(t.getPriority());//5

		Thread.currentThread().setPriority(9);
		System.out.println(Thread.currentThread().getPriority()); //9

		t.setPriority(4);
		System.out.println(t.getPriority());//4

		t.setPriority(11); // R.E IllegalArgumentException
	}
}

































































































