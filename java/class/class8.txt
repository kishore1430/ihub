2) Static variable
==================
A value of a variable which is not varied(changes) from object to object is called static variable.

A static variable will be created at the time of class loading and it will destroy at the time of class unloading.Hence scope of static variable is same as scope of a .class file.

A static variable will store in method area.

A static variable must and should declare immediately after the class using static keyword but not inside methods, blocks and constructors.

A static variable can access directly from instance area and static area.

A static variable can access by using object reference and class name.

ex:1
----
class Test
{
	//static variable
	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i); //10

		Test t=new Test();
		System.out.println(t.i);//10

		System.out.println(Test.i);//10
	}
}

Note:
-----
If we won't initialize any value to static variable then JVM will initialized default values.

ex:2
----
class Test
{
	//static variable
	static String s;

	public static void main(String[] args)
	{
		System.out.println(s); //null 

		Test t=new Test();
		System.out.println(t.s); //null

		System.out.println(Test.s); //null	
	}
}

ex:3
----
class Test
{
	public static void main(String[] args)
	{
		//calling 
		m1();

		Test t=new Test();
		t.m1();

		Test.m1();
		
	}
	
	//static method
	public static void m1()
	{
		System.out.println("Static-Method");
	}
	
}

ex:4
----
class Test
{
	//static variable
	static int i=10;

	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test();

		System.out.println(t1.i); //10
		System.out.println(t2.i); //10
			
		t1.i=20;

		System.out.println(t1.i); //20
		System.out.println(t2.i); //20
		
	}
}

3) Local variable
==================
To meet temperory requirements programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

A local variable will be created as a part of execution block and it will destroy when execution block is executed.Hence scope of local variable is same as scope of execution block where it is declare.

A local variable will store in java stack.

ex:1
----
class Test
{
	public static void main(String[] args)
	{
		//local variable
		int i=10;

		System.out.println(i);//10	
	}
}

Note:
-----
If we won't initialize any value to local variable then JVM will not initialized default values.

ex:2
-----
class Test
{
	public static void main(String[] args)
	{
		//local variable
		int i;

		System.out.println(i); 	
	}
}
o/p:
	C.T.E : variable i might not have been initialized


A local variable will accept only one modifier i.e final.

ex:3
----
class Test
{
	public static void main(String[] args)
	{
		//local variable
		final int i=10;

		System.out.println(i); //10
	}
}


Interview Question
==================

Q) Is java support access specifiers?

 No, java does not support access specifiers.
 It supports access modifiers.
 We have four access modifiers.
 1) default 
 2) public 
 3) private 
 4) protected   

















		

























