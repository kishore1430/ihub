Custom tags in JSP
==================
Tags which are created by the user based on the application requirement are called custom tags.

To create custom tags in JSP we will use taglib directive.

ex:
	<ihub:cube number="value"/>


Deployment Directory structure
------------------------------
JspApp10
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---CubeNumber.java
|
|---Web Content
	|
	|----index.jsp 
	|
	|----WEB-INF
		|
		|------web.xml
		|------mytags.tld
		|
		|------lib
			|
			|---jsp-api.jar
Note:
------
In above application we need to add "servlet-api.jar" and "jsp-api.jar" file in project build path.

Copy and paste "jsp-api.jar" fil inside WEB-INF/lib folder seperately.


index.jsp
---------

<%@taglib uri="/WEB-INF/mytags.tld"  prefix="ihub"%>

Cube of a given number is = <ihub:cube  number="5"/>



web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
</web-app>


mytags.tld
-----------
<?xml version="1.0" encoding="ISO-8859-1" ?>  
<!DOCTYPE taglib  
        PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"  
    "http://java.sun.com/j2ee/dtd/web-jsptaglibrary_1_2.dtd">  
  
<taglib>  
  
  <tlib-version>1.0</tlib-version>  
  <jsp-version>1.2</jsp-version>  
  <short-name>simple</short-name>  
  <uri>http://tomcat.apache.org/example-taglib</uri>  
  
	<tag>
		<name>cube</name>
		<tag-class>com.ihub.www.CubeNumber</tag-class>
		<attribute>
			<name>number</name>
			<required>true</required>
		</attribute>
	</tag>	 
	 
	 
</taglib>  

CubeNumber.java
-----------------
package com.ihub.www;

import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

public class CubeNumber extends TagSupport
{
	private int number;
	
	public void setNumber(int number)
	{
		this.number=number;
	}
	
	public int doStartTag()
	{
		try
		{
			JspWriter out=pageContext.getOut();
			out.println(number*number*number);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return SKIP_BODY;
	}
}

Request url
----------
	http://localhost:2525/JspApp10/


MVC in JSP
==========
MVC stands for Model View Controller.

It is one of the design pattern which seperates business logic ,persistence logic and data.

A Controller acts like a interface between Model and View.

A controller is used to intercept all incoming request.

Model contains some time business logics or data.

View represent presentation layer i.e GUI.

Diagram: jsp5.1


Deployment Directory structure
------------------------------
JspApp11
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---ControllerSrv.java
			|---LoginBean.java
|
|---Web Content
	|
	|----form.html
	|----view.jsp
	|----error.jsp
	|
	|----WEB-INF
		|
		|------web.xml

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.


form.html
---------
<center>
	
	<form action="test" method="POST">
	 
		UserName: <input type="text" name="username"/> <br>
		
		Password: <input type="password" name="password"/> <br>
		
		<input type="submit" value="submit"/>
		
	</form>
	
</center>

LoginBean.java
--------------
package com.ihub.www;

public class LoginBean
{
	private String username;
	private String password;
	
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
}

ControllerSrv.java
------------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ControllerSrv extends HttpServlet 
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String uname=req.getParameter("username");
		String pwd=req.getParameter("password");
		
		//add the date to bean object
		LoginBean lb=new LoginBean();
		lb.setUsername(uname);
		lb.setPassword(pwd);
		
		//send the bean object ot JSP
		req.setAttribute("bean",lb);
		
		if(pwd.equals("admin"))
		{
			RequestDispatcher rd=req.getRequestDispatcher("view.jsp");
			rd.forward(req,res);
		}
		else
		{
			RequestDispatcher rd=req.getRequestDispatcher("error.jsp");
			rd.forward(req,res);
		}
	}
}

view.jsp
--------
<%@page import="com.ihub.www.LoginBean" %>

<%
	LoginBean bean=(LoginBean)request.getAttribute("bean");
%>
<%= "Username:" + bean.getUsername() %> <br>
<%= "Password:" + bean.getPassword() %> <br>

error.jsp
---------
<center>
	<b style="color:red">
			Sorry! Incorrect username and password
	</b>
</center>
<br>
<%@include file="form.html" %>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>ControllerSrv</servlet-name>
  	<servlet-class>com.ihub.www.ControllerSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>ControllerSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

Request url
-----------
	http://localhost:2525/JspApp11/















