Sequences
=========
A sequence is an object which is used to generate the numbers.

syntax:
	create sequence <sequence_name> start with value increment by value;

ex:
	create sequence sq1 start with 101 increment by 1;

	create sequence sq1 start with 1 increment by 1;

	create sequence sq1 start with 10 increment by 10;

A sequence contains two pseudo's.

1) NEXTVAL
------------
	It is used to generate next number in a sequence.

	ex:
		create sequence sq1 start with 101 increment by 1;

		drop table student;
		create table student(sno number(3),sname varchar2(10),sadd varchar2(12));
		insert into student values(sq1.NEXTVAL,'raja','hyd');
		insert into student values(sq1.NEXTVAL,'ravi','delhi');
		insert into student values(sq1.NEXTVAL,'ramana','vizag');
		commit;
						

2) CURRVAL 
--------
	It will display the last number which is generated by sequence.
	ex:
		select sq1.CURRVAL from dual;



Q) Write a query to see the list of sequences present in database?

	select sequence_name from user_sequences;


Q) Write a query to drop the sequence from database?

	drop sequence sq1;


Synonyms
=========
Alternate name given to a table is called synonym.

We can use synonym istead of table name for all the commands.

syntax:
	create synonym <synonym_name> for <object_name>;
ex:
	create synonym sy1 for emp;
	create synonym sy2 for dept;
	create synonym sy3 for student;

	select * from sy1;
	select * from emp;

	delete from sy1;
	select * from emp; // no rows selected
	rollback;

	
Q) Write a query to see the list of synonyms present in database table?

	select synonym_name from user_synonyms;


Q) Wriet a query to drop the synonum from database?

	drop synonym sy1;


Indexes
========
Indexes are used to imporve the performance of select command.

Index is a database is similar to index in a book.

We can create index only to those columns which are widely used in where clause.

When index is created , two columns will be generated.One is ROWID and another is indexed column.
By default every records will store in ascending order in indexed column.

ex:
				Indexed Table
		--------------------------------------
		ROWID			Indexed column
		--------------------------------------
				|	201
				|	202		
				|	203
				|	204	
				|	205
				|	206
		---------------------------------------


ex:
	select * from emp where eid=206;


syntax:
-----
	create index <index1> ON <table_name>(col_name);

We have two types of indexes.

1) Simple index 
---------------
If a index is created only for one column is called simple index.
ex:
	create index idx1 on emp(eid);

	Here index is used when we use eid in where clause.
	ex:
		select * from emp where eid=206;

2) Complex index 
--------------
If a index is created for multiple columns is called complex index.
ex:
	create index idx2 on emp(eid,esal);

	Here index is used when we use eid and esal in where clause.
	ex:
		select * from emp where eid=201 and esal=8000;



Q) Write a query to see the list of indexes present in database?

	select index_name from user_indexes;


Q) Write a query to drop the index?

	drop index idx1;


Note:
-----
By default every index is a non-unique index.

If we want to create uniqu index we need to use below command.
ex:
	
create unique index idx3 on emp(deptno);// duplicate keys found

create unique index idx3 on emp(eid); 


Merge command
=============
Merge command is a combination insert and update command.

student10
----------
drop table student10;
create table student10(sno number(3),sname varchar2(10),sadd varchar2(12));
insert into student10 values(101,'raja','hyd');
insert into student10 values(102,'ravi','delhi');
insert into student10 values(103,'ramana','vizag');
commit;


student20
----------
drop table student20;
create table student20(sno number(3),sname varchar2(10),sadd varchar2(12));
insert into student20 values(103,'Alan','Texas');
insert into student20 values(104,'Jose','Florida');
commit;


merge into student10 s1
using student20 s2
ON(s1.sno=s2.sno)
when matched 
then update set s1.sname=s2.sname,s1.sadd=s2.sadd
when not matched
then insert(sno,sname,sadd) values (s2.sno,s2.sname,s2.sadd);

select * from student10; // 2 rows merged

select * from student20;



Q) What is Normalization?

Normalization is a process of dividing a large table into small tables and establish the relationship between them.


Q) What is De-normalization?

Denormalization is a process of collecting small tables and creating a big table is called denormalization. 










































