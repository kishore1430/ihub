Q) How can we create project in React/Application?

	npx create-react-app myapp1


Q) How can we switch to the project?

	cd   myapp1


Q) How can we run react project?
	
	npm start 
	

React project structure and work flow
=====================================
myapp1
|
|---node_modules 
|
|---public
	|
	|---index.html 
	|---fevicon.ico
	|---manifest.json 
|
|-----src
|	|
	|---index.js
	|---index.css
	|
	|---App.js
	|---App.css

	|---App.test.js
	|

|---package.json 
|---README.md

A "myapp1" is a react project name.

A "node_modules" contains all dependencies and libraries installed.

A "index.html" is a main template of react application.

A "fevicon.ico" is a favroite icon of a react application.

A "manifest.json" file contains metadata which is used when we install our application on client machine or mobile phone.

A "index.js" file is a entry point.

A "index.css" file is related to index.js file and it is global.

A "App.js" file is a parent component.

A "App.css" file is related to App.js file and it is global.

A "App.test.js" file is releated to unit testing.

A "package.json" file contains dependencies along with versions.

Note:
-----
	index.html  -- main template
	index.js    -- entry point 
	App.js	    -- parent component 	


		code goes 		render			output 
	App.js -----------> index.js -----------> index.html  -----------> Browser    

Steps to develop second react application
=========================================
step1:
-----
	Goto Reactprojects folder and open the command prompt.

step2:
-----
	Open the VSC editor.
	ex:
		Reactprojects> code . 

step3:
-----
	Create a react application i.e myapp2.
	ex:
		Reactprojects> npx create-react-app myapp2


step4:
-----
	Switch to the project.
	ex:	
		Reactprojects> cd myapp2

step5:
------
	Run the project.
	ex:
		Reactprojects/myapp2> npm start 


step6:
------
	Test the application by using below request url.
	ex:
		http://localhost:3000/

step7:
------
	Create a App.js file.

App.js 
-------
function App()
{
  return(
    <h1>Named Function </h1>
  )
}
export default App;

App.js
-----

const App=function(){
  return(
      <h1>Anonymous Function </h1>
  )
}
export default App;

App.js
-----

const App=()=>{
  return(
      <h1>Arrow Function </h1>
  )
}
export default App;

step8:
-----
	Write the code in index.js file.

index.js
--------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
    <App />
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


React Fragment
=================
Fragment is used to group list of childrens without adding 
extra nodes to the DOM.

In general, We can return only one element at a time but we can't return more then one element directly.

To return more then one element we need to use React Fragment.

syntax
---------
<React.Fragment>
	-
	-
</React.Fragment

or

<>
	-
	-
</>


Examples
----------
App.js
-----
function App
{
    return (
        //return react element
        return  <h1>IHUB Talent</h1>
                <h2>React Tutorial For Freshers</h2>
    );
}
//export React component
export default App


o/p: Filed to compile



To overcome above problem we can use <div> tag and inside that
<div> tag we can declare any child tags.

ex:
App.js
-----
function App
{
    return (
        //return react element
        return  
		<div>
			<h1>IHUB Talent</h1>
                	<h2>React Tutorial For Freshers</h2>
		</div>
    );
}
//export React component
export default App


Note:
----
	In above program "<div>" tag is a unused tag.
	To remove unused/unnecessary tags we can use React Fragment.


approach1
------------

App.js
-------
import React from "react";

function App()
{
    return (
            <React.Fragment>
            <h1>IHUB React Tutorial</h1>
            <h1>React Classes for Freshers</h1>
            </React.Fragment>
    );

}
export default App;


approach2
----------

App.js
-----
import React from "react";
import {Fragment} from 'react';
function App()
{
    return (
            <Fragment>
            <h1>IHUB React Tutorial</h1>
            <h1>React Classes for Freshers</h1>
            </Fragment>
    );

}
export default App;



approach3
----------

App.js
--------
import React from "react";

function App()
{
    return (
            <>
            <h1>IHUB React Tutorial</h1>
            <h1>React Classes for Freshers</h1>
            </>
    );

}
export default App;






































	


























	




















