Hooks
==========
Hooks allow us to "hook" into React features such as state and lifecycle methods.

Hooks allow function components to have access to state , lifecycle methods and other React features.

Hooks allow us to use React without classes.It means you can use state and other React features without writing a class.

React provides a few built-In hooks like useState,useEffect,useNavigate and etc.

Hooks are new addition in React 16.8v.


Rules of Hooks
==================

There are 3 rules for hooks:

1)Hooks can only be called inside React function components.

2)Hooks can only be called at the top level of a component.

3)Hooks cannot be conditional

Note: Hooks will not work in React class components.



Declaring State
================
A useState() is a Hook that allows us to add React state to function components.

We call it inside a function component to add some local state to it.

A useState() returns a pair - the current state value and a function that let us update it.

React will preserve this state between re-renders.

We can call this function from an event handler or somewhere else.

Project structure
--------------------
myapp10
|
|---node_modules
|
|---public
	|
	|--favicon.ico
	|--index.html
	|--manifest.json
|
|------src
	|
	|---App.js
	|
	|---index.js

|-----package.json
|-----README.md
	

step1:
-------
	create a react project.
	ex:
		Reactprojects> npx create-react-app myapp10

step2:
-----
	Open the VSC editor.
	ex:
		Reactprojects> code . 

step3:
---
	Move/Jump to myapp8 project.
	ex:
		Reactprojects> cd myapp10

step4:
-----
	Run the myapp8 project.
	ex:
		Reactprojects/myapp10> npm start


step5:
-----
	Test the application by using below request url.
	ex:
		http://localhost:3000

App.js
------
import { useState } from "react";
function App()
{
    const [name,setName]=useState("Alan");

    const handleClick=()=>
    {
           setName("Kelvin"); 
    }
    return (
        <div>
            <h1>Name : {name}</h1>
            <button onClick={handleClick}>clickMe</button>
        </div>
    )
}
export default App;


index.js
-----------
import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)





Effect Hooks
============
The Effect Hook let us to perform side effects in function components.

Data fetching , setting up a subscription, and manually changing the 
DOM in React components are all examples of side effects.

useEffect()
===========
A useEffect is a hook for encapsulating code that has "side effects".
if we are familiar with React class life cycle methods.We can thing of 
useEffect Hooks as componentDidMount,compnoentDidUpdate and 
componentWillUnmount combined.

useEffect =componentDidMount+ componentDidUpdate +componentWillUnmount


ex:
	import React,{useEffect} from "react";
	useEffect(Function)
	or
	useEffect(Function ,Array)


ex:
useEffect(()=>
{
	console.log("Hello useeffect");
});

ex:
useEffect(()=>
{	
	console.log("Hello useEffect");
},[count]);


What does useEffect do?
--------------------------
By using this Hook,we can tell react that your component needs to do 
something after render.

React remember the function we passed and call it later after performing 
the DOM updates.

In this effect, we set the document title,we could also perform data 
fetching or call some other imperative API.

Note:
--------
useEffect runs after the first render and after every update.



Project structure
--------------------
myapp11
|
|---node_modules
|
|---public
	|
	|--favicon.ico
	|--index.html
	|--manifest.json
|
|------src
	|
	|---App.js
	|
	|---index.js

|-----package.json
|-----README.md
	

step1:
-------
	create a react project.
	ex:
		Reactprojects> npx create-react-app myapp11

step2:
-----
	Open the VSC editor.
	ex:
		Reactprojects> code . 

step3:
---
	Move/Jump to myapp9 project.
	ex:
		Reactprojects> cd myapp11

step4:
-----
	Run the myapp9 project.
	ex:
		Reactprojects/myapp11> npm start


step5:
-----
	Test the application by using below request url.
	ex:
		http://localhost:3000


App.js
------
import { useState, useEffect } from "react";
function App()
{
    const [count,setCount]=useState(0);

    const handleClick=()=>
    {
           setCount(count+1); 
    }

    useEffect(() => {  
        // Update the document title using the browser API  
        document.title = `you have click for ${count} times`;
      });  
    return (
        <div>
            <h1>You clicked  {count} Times</h1>
            <button onClick={handleClick}>clickMe</button>
        </div>
    )
}
export default App;

index.js
----------

import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)



React useContext Hook (Context API)
======================================
Context provides a way to pass the data through the component tree without 
passing  props down manually at several level.

To do this without Context, we will need to pass the state(useState) as "props" through each nested component. This is called "props drilling".

Diagram: react7.1


Project  structure
--------------------
myapp12
|
|------node-modules
|
|------public
|	|
|	|------favicon.ico
|	|------index.html 
|	|------manifest.json
|
|------src
	|
	|------index.js
	|------App.js 
	|------Acomponent.js 
	|------Bcomponent.js
	|------Ccomponent.js
|
|------package.json
|------README.md

Diagram:  react7.2

step1:
-------
	create a react project.
	ex:
		Reactprojects> npx create-react-app myapp12

step2:
-----
	Open the VSC editor.
	ex:
		Reactprojects> code . 

step3:
---
	Move/Jump to myapp10 project.
	ex:
		Reactprojects> cd myapp12

step4:
-----
	Run the myapp10 project.
	ex:
		Reactprojects/myapp12> npm start


App.js
------------
import React from 'react';
import Acomponent from "./Acomponent";
export const UseContext=React.createContext();
function App()
{
    
    return (
        <div>
            <UseContext.Provider value={'IHUB'}>
            <Acomponent/>
            </UseContext.Provider>
           
        </div>
    )
}
export default App;

Acomponent.js
---------------
import Bcomponent from "./Bcomponent";

function Acomponent()
{
    return (
        <Bcomponent/>
    )
}
export default  Acomponent;


Bcomponent.js
----------------
import Ccomponent from "./Ccomponent";

function Bcomponent()
{
    return (
       <Ccomponent/>
    )
}
export default  Bcomponent;


Ccomponent.js
--------------
import {UseContext} from "./App";

function Ccomponent()
{
    return (
    <div>
     <UseContext.Consumer>
         {
             user => {
                 return <div>The value is : {user} </div>
             }
         }
     </UseContext.Consumer>
    </div>
    )
}
export default  Ccomponent;



index.js
-----------
import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)






